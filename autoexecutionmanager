#!/bin/bash

# Define the target directory for user scripts
TARGET_DIR="$HOME/Documents/Macsploit Automatic Execution"

# --- Function to Enable Auto Execute (Replaces First Line in Downloads/ms-settings) ---
enable_auto_execute_downloads() {
    local settings_filename="ms-settings"
    local MS_SETTINGS_FILE="$HOME/Downloads/$settings_filename" # Specific path to check

    echo "---------------------------------"
    echo "Checking for '$settings_filename' in Downloads folder..."
    echo "Path: $MS_SETTINGS_FILE"

    # --- Check if file exists at the specific path ---
    if [[ ! -f "$MS_SETTINGS_FILE" ]]; then
        echo "Error: Settings file not found at '$MS_SETTINGS_FILE'."
        echo "Auto Execute cannot be enabled automatically."
        echo "---------------------------------"
        return
    fi

    # --- Replace First Line Logic ---
    echo "Found settings file: $MS_SETTINGS_FILE"
    echo "Attempting to replace FIRST LINE with 'autoExecute true'..."

    # ---- SED: Replace line 1 ----
    # '1s/.*/autoExecute true/' means: On line 1 (1), substitute (s) the entire line (.*) with 'autoExecute true'.
    sed -i '' '1s/.*/autoExecute true/' "$MS_SETTINGS_FILE"
    local sed_exit_code=$? # Capture exit code immediately
    # ---- END SED ----

    # Verify the change by checking the new first line
    if [[ $sed_exit_code -eq 0 ]]; then
        # Get the first line AFTER the sed command
        local first_line
        first_line=$(head -n 1 "$MS_SETTINGS_FILE")

        if [[ "$first_line" == "autoExecute true" ]]; then
             echo "Success: First line of '$MS_SETTINGS_FILE' set to 'autoExecute true'."
        else
             # This case should be less likely now, but indicates sed ran but didn't result in the expected first line
             echo "Error: Failed to modify '$MS_SETTINGS_FILE'. Verification check failed after replacing first line."
        fi
    else
        # sed command itself failed (permissions, etc.)
        echo "Error: Failed to modify '$MS_SETTINGS_FILE'. The command to change the line failed (Exit code: $sed_exit_code)."
    fi
    echo "---------------------------------"
}


# --- Function to Create Script ---
create_script() {
    echo "---------------------------------"
    echo "Paste your script content below."
    echo "Press CTRL+D when you are finished pasting."
    echo "---------------------------------"
    script_content=$(cat < /dev/tty) # Read from terminal

    if [[ -z "$script_content" ]]; then
        echo "-----"; echo "Error: No content provided. Script creation cancelled."; echo "-----"
        return
    fi

    echo; echo "---------------------------------"
    read -p "Enter the desired filename (without .txt extension): " filename < /dev/tty # Read from terminal

    if [[ -z "$filename" ]]; then
        echo "-----"; echo "Error: No filename provided. Script creation cancelled."; echo "-----"
        return
    fi

    filepath="$TARGET_DIR/$filename.txt"

    if [[ -e "$filepath" ]]; then
        read -p "Warning: File '$filename.txt' already exists. Overwrite? (y/N): " confirm_overwrite < /dev/tty # Read from terminal
        if [[ ! "$confirm_overwrite" =~ ^[Yy]$ ]]; then
             echo "-----"; echo "Script creation cancelled."; echo "-----"
             return
        fi
    fi

    printf "%s" "$script_content" > "$filepath"

    if [[ $? -eq 0 ]]; then
        echo "-----"; echo "Success: Script '$filename.txt' created in '$TARGET_DIR'."; echo "-----"
    else
        echo "-----"; echo "Error: Failed to create script '$filename.txt'."; echo "-----"
    fi
}

# --- Function to Remove Script (Bash 3.x Compatible) ---
remove_script() {
    echo "---------------------------------"
    echo "Select a script file to remove:"
    echo "---------------------------------"

    if [[ ! -d "$TARGET_DIR" ]]; then
        echo "Directory '$TARGET_DIR' does not exist. No scripts to remove."
        echo "---------------------------------"
        return
    fi

    local files=()
    while IFS= read -r -d $'\0' file; do
        if [[ -n "$file" && "$file" != "$TARGET_DIR" ]]; then
             files+=("$file")
        fi
    done < <(find "$TARGET_DIR" -maxdepth 1 -type f -print0 2>/dev/null) # Suppress find errors like perm denied

    if [[ ${#files[@]} -eq 0 ]]; then
        echo "No script files found in '$TARGET_DIR'."
        echo "---------------------------------"
        return
    fi

    local i=0
    while [[ $i -lt ${#files[@]} ]]; do
        echo "$((i + 1)) - $(basename "${files[i]}")"
        i=$((i + 1))
    done
    echo "0 - Cancel"
    echo "---------------------------------"

    read -p "Enter the number of the file to delete (or 0 to cancel): " choice < /dev/tty # Read from terminal

    if [[ ! "$choice" =~ ^[0-9]+$ ]]; then
        echo "Error: Invalid input. Please enter a number."; echo "---------------------------------"
        return
    fi

    if [[ "$choice" -eq 0 ]]; then
        echo "Deletion cancelled."; echo "---------------------------------"
        return
    fi

    if [[ "$choice" -gt ${#files[@]} || "$choice" -lt 1 ]]; then
        echo "Error: Invalid number. Please choose a number from the list."; echo "---------------------------------"
        return
    fi

    file_to_delete="${files[$((choice - 1))]}"
    filename_only=$(basename "$file_to_delete")

    read -p "Are you sure you want to delete '$filename_only'? (y/N): " confirm_delete < /dev/tty # Read from terminal
    if [[ "$confirm_delete" =~ ^[Yy]$ ]]; then
        rm "$file_to_delete"
        if [[ $? -eq 0 ]]; then
            echo "Success: File '$filename_only' deleted."
        else
            echo "Error: Failed to delete '$filename_only'."
        fi
    else
        echo "Deletion cancelled."
    fi
     echo "---------------------------------"
}

# --- Main Script Logic ---

# Ensure the user script directory exists
mkdir -p "$TARGET_DIR"
if [[ $? -ne 0 ]]; then
    echo "Error: Could not create directory '$TARGET_DIR'. Please check permissions."
    exit 1
fi

# Main Menu Loop
while true; do
    echo "================================="
    echo " Macsploit Script Manager Menu   "
    echo "================================="
    echo " 1) Enable Macsploit Auto Execute (Checks Downloads)" # Description might need update if path changes
    echo " 2) Create Autoexecute script file"
    echo " 3) Remove Autoexecute script file"
    echo " 4) Exit"
    echo "---------------------------------"
    read -p "Choose an option (1-4): " main_choice < /dev/tty # Read from terminal

    case $main_choice in
        1)
            enable_auto_execute_downloads # Use function that replaces first line
            ;;
        2)
            create_script
            ;;
        3)
            remove_script
            ;;
        4)
            echo "Exiting."
            exit 0
            ;;
        *)
            echo "Invalid option. Please choose 1, 2, 3, or 4."
            ;;
    esac
    echo
    read -n 1 -s -r -p "Press any key to continue..." < /dev/tty # Read from terminal
    echo
done

#!/bin/bash

# Define the target directory using ~ which expands to the user's home directory
TARGET_DIR="$HOME/Documents/Macsploit Automatic Execution"

# --- Function to Create Script ---
create_script() {
    echo "---------------------------------"
    echo "Paste your script content below."
    echo "Press CTRL+D when you are finished pasting."
    echo "---------------------------------"

    script_content=$(cat)

    if [[ -z "$script_content" ]]; then
        echo "-----"
        echo "Error: No content provided. Script creation cancelled."
        echo "-----"
        return
    fi

    echo
    echo "---------------------------------"
    read -p "Enter the desired filename (without .txt extension): " filename

    if [[ -z "$filename" ]]; then
        echo "-----"
        echo "Error: No filename provided. Script creation cancelled."
        echo "-----"
        return
    fi

    filepath="$TARGET_DIR/$filename.txt"

    if [[ -e "$filepath" ]]; then
        read -p "Warning: File '$filename.txt' already exists. Overwrite? (y/N): " confirm_overwrite
        if [[ ! "$confirm_overwrite" =~ ^[Yy]$ ]]; then
             echo "-----"
             echo "Script creation cancelled."
             echo "-----"
             return
        fi
    fi

    printf "%s" "$script_content" > "$filepath"

    if [[ $? -eq 0 ]]; then
        echo "-----"
        echo "Success: Script '$filename.txt' created in '$TARGET_DIR'."
        echo "-----"
    else
        echo "-----"
        echo "Error: Failed to create script '$filename.txt'."
        echo "-----"
    fi
}

# --- Function to Remove Script (Bash 3.x Compatible) ---
remove_script() {
    echo "---------------------------------"
    echo "Select a script file to remove:"
    echo "---------------------------------"

    if [[ ! -d "$TARGET_DIR" ]]; then
        echo "Directory '$TARGET_DIR' does not exist. No scripts to remove."
        echo "---------------------------------"
        return
    fi

    # Bash 3.x compatible way to read null-terminated file list from find
    local files=() # Declare an empty array to store filenames
    while IFS= read -r -d $'\0' file; do
        # Check if it's actually a file path (find might return just the directory if empty)
        # and not the directory itself.
        if [[ -n "$file" && "$file" != "$TARGET_DIR" ]]; then
             files+=("$file") # Add the file path to the array
        fi
    done < <(find "$TARGET_DIR" -maxdepth 1 -type f -print0) # Use process substitution

    # Check if any files were found
    if [[ ${#files[@]} -eq 0 ]]; then
        echo "No script files found in '$TARGET_DIR'."
        echo "---------------------------------"
        return
    fi

    # List files with numbers
    local i=0
    while [[ $i -lt ${#files[@]} ]]; do
        echo "$((i + 1)) - $(basename "${files[i]}")"
        i=$((i + 1))
    done
    echo "0 - Cancel"
    echo "---------------------------------"

    read -p "Enter the number of the file to delete (or 0 to cancel): " choice

    if [[ ! "$choice" =~ ^[0-9]+$ ]]; then
        echo "Error: Invalid input. Please enter a number."
        echo "---------------------------------"
        return
    fi

    if [[ "$choice" -eq 0 ]]; then
        echo "Deletion cancelled."
        echo "---------------------------------"
        return
    fi

    if [[ "$choice" -gt ${#files[@]} || "$choice" -lt 1 ]]; then
        echo "Error: Invalid number. Please choose a number from the list."
        echo "---------------------------------"
        return
    fi

    file_to_delete="${files[$((choice - 1))]}"
    filename_only=$(basename "$file_to_delete")

    read -p "Are you sure you want to delete '$filename_only'? (y/N): " confirm_delete
    if [[ "$confirm_delete" =~ ^[Yy]$ ]]; then
        rm "$file_to_delete"
        if [[ $? -eq 0 ]]; then
            echo "Success: File '$filename_only' deleted."
        else
            echo "Error: Failed to delete '$filename_only'."
        fi
    else
        echo "Deletion cancelled."
    fi
     echo "---------------------------------"
}

# --- Main Script Logic ---

mkdir -p "$TARGET_DIR"
if [[ $? -ne 0 ]]; then
    echo "Error: Could not create directory '$TARGET_DIR'. Please check permissions."
    exit 1
fi

while true; do
    echo "================================="
    echo " Macsploit Autoexec Script Manager "
    echo "================================="
    echo " 1) Create Autoexecute script"
    echo " 2) Remove Autoexecute script"
    echo " 3) Exit"
    echo "---------------------------------"
    read -p "Choose an option (1-3): " main_choice

    case $main_choice in
        1)
            create_script
            ;;
        2)
            remove_script
            ;;
        3)
            echo "Exiting."
            exit 0
            ;;
        *)
            echo "Invalid option. Please choose 1, 2, or 3."
            ;;
    esac
    echo
    read -n 1 -s -r -p "Press any key to continue..."
    echo
done
